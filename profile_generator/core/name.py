import random

def generate_name(region_data, gender, name_method=None, custom_first_name=None, custom_last_name=None):
    first_name = None
    last_name = None
    middle_name = None

    if name_method == 'custom' and custom_first_name and custom_last_name:
        first_name = custom_first_name
        last_name = custom_last_name
        # For custom names, middle name is not generated by default
    else: # 'random' or 'existing'
        # Determine gender-specific first names
        if gender == 'male':
            first_names_list = region_data['first_names_male']
        elif gender == 'female':
            first_names_list = region_data['first_names_female']
        else: # 'any' or unspecified gender, pick from both lists
            first_names_list = region_data['first_names_male'] + region_data['first_names_female']

        # Select first name based on weights
        if first_names_list:
            first_name = random.choices([name['name'] for name in first_names_list], [name['weight'] for name in first_names_list])[0]
        else:
            first_name = "John" # Fallback

        last_name = random.choices([name['name'] for name in region_data['last_names']], [name['weight'] for name in region_data['last_names']])[0]
        
        # Generate middle name if available and random chance passes
        if region_data.get('middle_names') and random.random() < 0.9:
            middle_name = random.choices([name['name'] for name in region_data['middle_names']], [name['weight'] for name in region_data['middle_names']])[0]

    return {
        'first_name': first_name,
        'middle_name': middle_name,
        'last_name': last_name
    }
