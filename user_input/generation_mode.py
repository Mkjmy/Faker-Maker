import random
from rich.console import Console
from .exceptions import BackException

def select_generation_mode(console: Console, regions_config, debug_print_func):
    """Returns a dictionary defining the generation mode selection question."""
    return {
        'type': 'select',
        'prompt': "Please select a generation mode:",
        'choices': [
            {"name": "Custom (Allows you to specify all details)", "value": "2"},
            {"name": "Completely Random (Generates a random profile with default settings)", "value": "1"},
            {"name": "Back", "value": "back"}
        ],
        'store_as': 'mode'
    }

def get_random_constraints(regions, debug_print_func):
    debug_print_func(f"DEBUG: get_random_constraints - regions received: {regions}")
    """Generates random constraints for the 'Completely Random' mode."""
    constraints = {}
    constraints['region'] = random.choice(regions)['id']
    constraints['num_profiles'] = 1
    constraints['age_range'] = (18, 80)
    constraints['gender'] = 'any'
    constraints['family_details'] = random.choice([True, False])
    constraints['marital_status'] = 'any'
    constraints['num_children'] = 'any'
    constraints['physical_details'] = random.choice([True, False])
    constraints['include_unconventional_data'] = False
    constraints['output_format'] = 'console'
    constraints['name_generation_method'] = 'existing'
    debug_print_func(f"DEBUG: Constraints generated by get_random_constraints: {constraints}")
    return constraints